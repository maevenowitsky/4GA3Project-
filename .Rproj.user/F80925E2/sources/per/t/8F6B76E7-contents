---
title: "4GA3Project_markdown"
output: html_document
date: "2023-03-20"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:

```{r cars}
summary(cars)
```

## Including Plots

You can also embed plots, for example:

```{r pressure, echo=FALSE}
plot(pressure)
```

Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.


```{r}
# loading packages
library(cancensus)
library(ggplot2)
library(tidyverse)
library(tidycensus)
library(tigris)
library(kableExtra)
library(plotly)
library(sf)
library(spatialreg)
library(spdep)
library(spgwr)
library(dplyr)
```

```{r}
# storing the API key in system environment to be easily used in API calls
options(cancensus.api_key = "CensusMapper_ff4c917e80df34b71900e0a048c999dd")
```

```{r}
# assigning a persistent local cache
options(cancensus.cache_path = "/Users/dainadeangelis/Desktop/4GA3Project-/Project data")
```

```{r}
# returning census data and geography for the Vancouver CMA as an sf-class dataframe
census_data <- get_census(dataset='CA21', regions=list(CMA="59933"), vectors=c("v_CA21_1","v_CA21_386","v_CA21_906","v_CA21_4238","v_CA21_4239", "v_CA21_4240", "v_CA21_4875", "v_CA21_4914"), labels="detailed", geo_format="sf", level='CT')
```

```{r}
# replacing spaces for variable names with periods
colnames(census_data) =  gsub(colnames(census_data),pattern="\\s|[[:punct:]]",replacement = ".")
```

```{r}
# obtaining centroids for census tracts in the Vancouver CMA
CT_centroids <- st_coordinates(st_centroid(census_data))
```

```{r}
# example
census_data <- census_data %>%
  mutate(Proportion.visible.minority = (v.CA21.4875..Total.visible.minority.population / v.CA21.1..Population..2021))
```

```{r}
# example
minority_prop_map <- ggplot(census_data) +
geom_sf(aes(fill = cut_number(Proportion.visible.minority, 5)),
color = "black",
size = 0.1) +
scale_fill_brewer(palette = "YlOrRd") +
labs(fill = "Prop Visible Minority Vancouver CTs")

minority_prop_map
```

```{r}
# reading csv packages

parks <- read.csv(file = "Project data/parks.csv", head = TRUE, sep = ";") 

street_trees <- read.csv(file = "Project data/street-trees.csv", head = TRUE, sep = ";") 

homeless_shelters <- read.csv(file = "Project data/homeless-shelter-locations.csv", head = TRUE, sep = ";") 
```

```{r}
#extracting point data from homeless shelter csv file
homeless_shelt_coord <- data.frame(do.call("rbind", strsplit(as.character(homeless_shelters$geo_point_2d), ",", fixed = TRUE)))

# Rename multiple columns
homeless_shelt_coord <- homeless_shelt_coord %>% 
                    rename("X" = "X1",
                           "Y" = "X2")
```

```{r}
#extracting point data from park csv file
parks_coord <- data.frame(do.call("rbind", strsplit(as.character(parks$GoogleMapDest), ",", fixed = TRUE)))

# Rename multiple columns
parks_coord <- parks_coord %>% 
                    rename("X" = "X1",
                           "Y" = "X2")
```

```{r}
#extracting point data from trees csv files
trees_coord <- data.frame(do.call("rbind", strsplit(as.character(street_trees$geo_point_2d), ",", fixed = TRUE)))

# Rename multiple columns
trees_coord <- trees_coord %>% 
                    rename("X" = "X1",
                           "Y" = "X2")
```
