header = FALSE,
title = "Population Density of Census Tracts regressed on Number of Parks Accessible")
summary(model_population_density)
ggplot(data = census_data,
aes(x = accessibility,
y = Population_density))+
geom_point() +
geom_smooth(formula = y ~ x,
method = "lm") +
ylab("Population Density") +
xlab("Number of Parks Accessible within 30 Minutes (Through walking or public transit")
#creating a regression model of population density regressing on number of accessible parks
model_visible_minority <- lm(formula = Proportion_visible_minority ~ accessibility,
data = census_data)
stargazer(model_visible_minority,
header = FALSE,
title = "Proportion of Visible Minority Population in Census Tracts regressed on Number of Parks Accessible")
summary(model_visible_minority)
ggplot(data = census_data,
aes(x = accessibility,
y = Proportion_visible_minority))+
geom_point() +
geom_smooth(formula = y ~ x,
method = "lm") +
ylab("Proportion of Visible Minority Population") +
xlab("Number of Parks Accessible within 30 Minutes (Through walking or public transit")
#creating a regression model of population density regressing on number of accessible parks
model_nonvisible_minority <- lm(formula = Proportion_nonvisible_minority ~ accessibility,
data = census_data)
stargazer(model_nonvisible_minority,
header = FALSE,
title = "Proportion of Non-Visible Minority Population in Census Tracts regressed on Number of Parks Accessible")
summary(model_nonvisible_minority)
ggplot(data = census_data,
aes(x = accessibility,
y = Proportion_nonvisible_minority))+
geom_point() +
geom_smooth(formula = y ~ x,
method = "lm") +
ylab("Proportion of Non-Visible Minority Population") +
xlab("Number of Parks Accessible within 30 Minutes (Through walking or public transit")
#creating a regression model of population density regressing on number of accessible parks
model_income <- lm(formula = Proportion_low_income ~ accessibility,
data = census_data)
stargazer(model_income,
header = FALSE,
title = "Proportion of Low Income Population in Census Tracts regressed on Number of Parks Accessible")
summary(model_income)
ggplot(data = census_data,
aes(x = accessibility,
y = Proportion_low_income))+
geom_point() +
geom_smooth(formula = y ~ x,
method = "lm") +
ylab("Proportion of Low Income Population") +
xlab("Number of Parks Accessible within 30 Minutes (Through walking or public transit")
knitr::opts_chunk$set(echo = TRUE)
# Clearing data
rm(list = ls())
# loading packages
library(cancensus) #this package allows us to download census data from Stats Canada
library(ggplot2)
library(tidyverse) #collection of packages for data visualization and manipulation (includes dplyr and ggplot2)
library(tidycensus)
library(tigris)
library(kableExtra)
library(cartogram)
library(kableExtra)
library(plotly) #packaged used to create interactive graphics
library(sf) #package to work with geospatial data of simple feature class
library(spatialreg) #package used to perform spatial regression analysis
library(spdep) #package used to compute spatial dependence, weighting schemes, and spatial statistics
library(spgwr) # package for geographically weighted regression
library(dplyr) #package to work with and manipulate data frames
library(r5r) #package to generate routing analysis and calculate the accessibility of parks in Vancouver
library(rJava) #an r to java interface used to support the r5r package
library(stargazer) #package to show results of regression analysis as a table
# storing the API key in system environment to be easily used in API calls
options(cancensus.api_key = "CensusMapper_ff4c917e80df34b71900e0a048c999dd")
# assigning a persistent local cache
options(cancensus.cache_path = "/Users/dainadeangelis/Desktop/4GA3Project-/Project data")
Sys.setenv(CM_CACHE_PATH = "/Users/dainadeangelis/Desktop/4GA3Project-/Project data")
# returning census data and geography for the Vancouver CMA as an sf-class dataframe
census_data <- get_census(dataset='CA21', regions=list(CSD="5915022"), vectors=c("v_CA21_1","v_CA21_386","v_CA21_906", "v_CA21_4875", "v_CA21_4914", "v_CA21_1010"), labels="detailed", geo_format="sf", level='CT')
# removing columns that are not needed for analysis
census_data <- census_data[,-c(4,5,9,10,13,15,16)]
# renaming the columns in the dataset
names(census_data) [1] <- "Shape_area_km2"
names(census_data) [3] <- "Number_of_households"
names(census_data) [4] <- "Region_name"
names(census_data) [7] <- "Number_of_dwellings"
names(census_data) [10:15] <- c("Population_2021", "Average_age", "Median_total_income_of_household_2020", "Total_visible_minority_population", "Not_a_visible_minority", "Low_income_status_for_the_population_in_private_households_2020")
# obtaining centroids for census tracts in the Vancouver CSD
CT_centroids <- st_coordinates(st_centroid(census_data))
#converting centroids to data frame
centroids_df <- as.data.frame(CT_centroids)
class(centroids_df)
centroids_df<- cbind(centroids_df, census_data$GeoUID)
centroids_df <- centroids_df %>%
rename("lon" = "X",
"lat" = "Y",
"id" = "census_data$GeoUID")
# calculating population density for the census tracts in Vancouver
census_data <- census_data %>%
mutate(Population_density =
(Population_2021 / Shape_area_km2))
# calculating the proportion of the minority population and adding to census_data
census_data <- census_data %>%
mutate(Proportion_visible_minority= (Total_visible_minority_population / Population_2021))
# calculating the proportion of the non visible minority population and adding to census_data
census_data <- census_data %>%
mutate(Proportion_nonvisible_minority= (Not_a_visible_minority / Population_2021))
# calculating the proportion of low income status in Vancouver census tracts
census_data <- census_data %>%
mutate(Proportion_low_income = (Low_income_status_for_the_population_in_private_households_2020 / Population_2021))
# reading csv files
parks <- read.csv(file = "Project data/parks.csv", head = TRUE, sep = ";")
#extracting point data from park csv file
parks_coord <- data.frame(do.call("rbind", strsplit(as.character(parks$GoogleMapDest), ",", fixed = TRUE)))
# Rename multiple columns
parks_coord <- parks_coord %>%
rename("X" = "X1",
"Y" = "X2")
#preparing park data for r5r
class(parks_coord)
parks_coord<- cbind(parks_coord, parks$ParkID)
# renaming columns
parks_coord <- parks_coord %>%
rename("lat" = "X",
"lon" = "Y",
"id" = "parks$ParkID")
# changing columns to numeric
parks_coord$lon <- as.numeric(parks_coord$lon)
parks_coord$lat <- as.numeric(parks_coord$lat)
parks_coord <- parks_coord %>%
add_column(Parks_count = 1)
#allocating RAM memory to Java to use the r5r package
options(java.parameters = "-Xmx2G")
#building transport network for r5r
path <- file.path("Project data/r5rpath")
#building transport network for r5r
list.files(path)
r5r_core <- setup_r5(data_path = path)
#load origin points as the centroids of census tracts
points <- centroids_df
class(points)
#points of interest: parks
poi <- parks_coord
#departure times
departure_datetime <- as.POSIXct("16-02-2023 14:00:00",
format = "%d-%m-%Y %H:%M:%S")
#using accessibility from r5r
access <- accessibility(r5r_core = r5r_core,
origins = points,
destinations = poi,
opportunities_colnames = c("Parks_count"),
mode = c("WALK", "TRANSIT"),
departure_datetime = departure_datetime,
decay_function = "step",
cutoffs = 30)
census_data <- cbind(census_data, accessibility = access$accessibility)
# creating a choropleth map for the 2021 population
ggplot(census_data) +
geom_sf(aes(fill = cut_number(Population_2021, 5)),
colour = "black",
size = 0.1) +
scale_fill_brewer(palette = "YlOrRd") +
coord_sf() +
labs(fill = "Population")
# creating a choropleth map for the population density
ggplot(census_data) +
geom_sf(aes(fill = cut_number(Population_density, 5)),
colour = "black",
size = 0.1) +
scale_fill_brewer(palette = "YlOrRd") +
coord_sf() +
labs(fill = "Population Density")
# creating a choropleth map for the proportion of the visisble minority population
ggplot(census_data) +
geom_sf(aes(fill = cut_number(Proportion_visible_minority, 5)),
color = "black",
size = 0.1) +
scale_fill_brewer(palette = "YlOrRd") +
labs(fill = "Prop Visible Minority")
# creating a choropleth map for the proportion of the non-visible minority population
ggplot(census_data) +
geom_sf(aes(fill = cut_number(Proportion_nonvisible_minority, 5)),
color = "black",
size = 0.1) +
scale_fill_brewer(palette = "YlOrRd") +
labs(fill = "Prop Non-Visible Minority")
# creating a choropleth map displaying the proportion of low-income
ggplot(census_data) +
geom_sf(aes(fill = cut_number(Proportion_low_income, 5)),
color = "black",
size = 0.1) +
scale_fill_brewer(palette = "YlOrRd") +
labs(fill = "Prop Low Income")
# creating a choropleth map displaying the number of parks accessible to a census tract's centroids within 30 minutes
ggplot(census_data) +
geom_sf(aes(fill = cut_number(accessibility, 5)),
color = "black",
size = 0.1) +
scale_fill_brewer(palette = "YlOrRd") +
labs(fill = "Number of Neighbourhoods Accessible Within 30 Minutes")
#creating a regression model of population regressing on number of accessible parks
model_population <- lm(formula = Population_2021 ~ accessibility,
data = census_data)
stargazer(model_population,
header = FALSE,
title = "Population of Census Tracts regressed on Number of Parks Accessible")
summary(model_population)
ggplot(data = census_data,
aes(x = accessibility,
y = Population_2021))+
geom_point() +
geom_smooth(formula = y ~ x,
method = "lm") +
ylab("Population (2021)") +
xlab("Number of Parks Accessible within 30 Minutes (Through walking or public transit")
#creating a regression model of population density regressing on number of accessible parks
model_population_density <- lm(formula = Population_density ~ accessibility,
data = census_data)
stargazer(model_population_density,
header = FALSE,
title = "Population Density of Census Tracts regressed on Number of Parks Accessible")
summary(model_population_density)
ggplot(data = census_data,
aes(x = accessibility,
y = Population_density))+
geom_point() +
geom_smooth(formula = y ~ x,
method = "lm") +
ylab("Population Density") +
xlab("Number of Parks Accessible within 30 Minutes (Through walking or public transit")
#creating a regression model of population density regressing on number of accessible parks
model_visible_minority <- lm(formula = Proportion_visible_minority ~ accessibility,
data = census_data)
stargazer(model_visible_minority,
header = FALSE,
title = "Proportion of Visible Minority Population in Census Tracts regressed on Number of Parks Accessible")
summary(model_visible_minority)
ggplot(data = census_data,
aes(x = accessibility,
y = Proportion_visible_minority))+
geom_point() +
geom_smooth(formula = y ~ x,
method = "lm") +
ylab("Proportion of Visible Minority Population") +
xlab("Number of Parks Accessible within 30 Minutes (Through walking or public transit")
#creating a regression model of population density regressing on number of accessible parks
model_nonvisible_minority <- lm(formula = Proportion_nonvisible_minority ~ accessibility,
data = census_data)
stargazer(model_nonvisible_minority,
header = FALSE,
title = "Proportion of Non-Visible Minority Population in Census Tracts regressed on Number of Parks Accessible")
summary(model_nonvisible_minority)
ggplot(data = census_data,
aes(x = accessibility,
y = Proportion_nonvisible_minority))+
geom_point() +
geom_smooth(formula = y ~ x,
method = "lm") +
ylab("Proportion of Non-Visible Minority Population") +
xlab("Number of Parks Accessible within 30 Minutes (Through walking or public transit")
#creating a regression model of population density regressing on number of accessible parks
model_income <- lm(formula = Proportion_low_income ~ accessibility,
data = census_data)
stargazer(model_income,
header = FALSE,
title = "Proportion of Low Income Population in Census Tracts regressed on Number of Parks Accessible")
summary(model_income)
ggplot(data = census_data,
aes(x = accessibility,
y = Proportion_low_income))+
geom_point() +
geom_smooth(formula = y ~ x,
method = "lm") +
ylab("Proportion of Low Income Population") +
xlab("Number of Parks Accessible within 30 Minutes (Through walking or public transit")
knitr::opts_chunk$set(echo = TRUE)
# Clearing data
rm(list = ls())
# loading packages
library(cancensus) #this package allows us to download census data from Stats Canada
library(ggplot2)
library(tidyverse) #collection of packages for data visualization and manipulation (includes dplyr and ggplot2)
library(tidycensus)
library(tigris)
library(kableExtra)
library(cartogram)
library(kableExtra)
library(plotly) #packaged used to create interactive graphics
library(sf) #package to work with geospatial data of simple feature class
library(spatialreg) #package used to perform spatial regression analysis
library(spdep) #package used to compute spatial dependence, weighting schemes, and spatial statistics
library(spgwr) # package for geographically weighted regression
library(dplyr) #package to work with and manipulate data frames
library(r5r) #package to generate routing analysis and calculate the accessibility of parks in Vancouver
library(rJava) #an r to java interface used to support the r5r package
library(stargazer) #package to show results of regression analysis as a table
# storing the API key in system environment to be easily used in API calls
options(cancensus.api_key = "CensusMapper_ff4c917e80df34b71900e0a048c999dd")
# assigning a persistent local cache
options(cancensus.cache_path = "/Users/dainadeangelis/Desktop/4GA3Project-/Project data")
Sys.setenv(CM_CACHE_PATH = "/Users/dainadeangelis/Desktop/4GA3Project-/Project data")
# returning census data and geography for the Vancouver CMA as an sf-class dataframe
census_data <- get_census(dataset='CA21', regions=list(CSD="5915022"), vectors=c("v_CA21_1","v_CA21_386","v_CA21_906", "v_CA21_4875", "v_CA21_4914", "v_CA21_1010"), labels="detailed", geo_format="sf", level='CT')
# removing columns that are not needed for analysis
census_data <- census_data[,-c(4,5,9,10,13,15,16)]
# renaming the columns in the dataset
names(census_data) [1] <- "Shape_area_km2"
names(census_data) [3] <- "Number_of_households"
names(census_data) [4] <- "Region_name"
names(census_data) [7] <- "Number_of_dwellings"
names(census_data) [10:15] <- c("Population_2021", "Average_age", "Median_total_income_of_household_2020", "Total_visible_minority_population", "Not_a_visible_minority", "Low_income_status_for_the_population_in_private_households_2020")
# obtaining centroids for census tracts in the Vancouver CSD
CT_centroids <- st_coordinates(st_centroid(census_data))
#converting centroids to data frame
centroids_df <- as.data.frame(CT_centroids)
class(centroids_df)
centroids_df<- cbind(centroids_df, census_data$GeoUID)
centroids_df <- centroids_df %>%
rename("lon" = "X",
"lat" = "Y",
"id" = "census_data$GeoUID")
# calculating population density for the census tracts in Vancouver
census_data <- census_data %>%
mutate(Population_density =
(Population_2021 / Shape_area_km2))
# calculating the proportion of the minority population and adding to census_data
census_data <- census_data %>%
mutate(Proportion_visible_minority= (Total_visible_minority_population / Population_2021))
# calculating the proportion of the non visible minority population and adding to census_data
census_data <- census_data %>%
mutate(Proportion_nonvisible_minority= (Not_a_visible_minority / Population_2021))
# calculating the proportion of low income status in Vancouver census tracts
census_data <- census_data %>%
mutate(Proportion_low_income = (Low_income_status_for_the_population_in_private_households_2020 / Population_2021))
# reading csv files
parks <- read.csv(file = "Project data/parks.csv", head = TRUE, sep = ";")
#extracting point data from park csv file
parks_coord <- data.frame(do.call("rbind", strsplit(as.character(parks$GoogleMapDest), ",", fixed = TRUE)))
# Rename multiple columns
parks_coord <- parks_coord %>%
rename("X" = "X1",
"Y" = "X2")
#preparing park data for r5r
class(parks_coord)
parks_coord<- cbind(parks_coord, parks$ParkID)
# renaming columns
parks_coord <- parks_coord %>%
rename("lat" = "X",
"lon" = "Y",
"id" = "parks$ParkID")
# changing columns to numeric
parks_coord$lon <- as.numeric(parks_coord$lon)
parks_coord$lat <- as.numeric(parks_coord$lat)
parks_coord <- parks_coord %>%
add_column(Parks_count = 1)
#allocating RAM memory to Java to use the r5r package
options(java.parameters = "-Xmx2G")
#building transport network for r5r
path <- file.path("Project data/r5rpath")
#building transport network for r5r
list.files(path)
r5r_core <- setup_r5(data_path = path)
#load origin points as the centroids of census tracts
points <- centroids_df
class(points)
#points of interest: parks
poi <- parks_coord
#departure times
departure_datetime <- as.POSIXct("16-02-2023 14:00:00",
format = "%d-%m-%Y %H:%M:%S")
#using accessibility from r5r
access <- accessibility(r5r_core = r5r_core,
origins = points,
destinations = poi,
opportunities_colnames = c("Parks_count"),
mode = c("WALK", "TRANSIT"),
departure_datetime = departure_datetime,
decay_function = "step",
cutoffs = 30)
census_data <- cbind(census_data, accessibility = access$accessibility)
# creating a choropleth map for the 2021 population
ggplot(census_data) +
geom_sf(aes(fill = cut_number(Population_2021, 5)),
colour = "black",
size = 0.1) +
scale_fill_brewer(palette = "YlOrRd") +
coord_sf() +
labs(fill = "Population")
# creating a choropleth map for the population density
ggplot(census_data) +
geom_sf(aes(fill = cut_number(Population_density, 5)),
colour = "black",
size = 0.1) +
scale_fill_brewer(palette = "YlOrRd") +
coord_sf() +
labs(fill = "Population Density")
# creating a choropleth map for the proportion of the visisble minority population
ggplot(census_data) +
geom_sf(aes(fill = cut_number(Proportion_visible_minority, 5)),
color = "black",
size = 0.1) +
scale_fill_brewer(palette = "YlOrRd") +
labs(fill = "Prop Visible Minority")
# creating a choropleth map for the proportion of the non-visible minority population
ggplot(census_data) +
geom_sf(aes(fill = cut_number(Proportion_nonvisible_minority, 5)),
color = "black",
size = 0.1) +
scale_fill_brewer(palette = "YlOrRd") +
labs(fill = "Prop Non-Visible Minority")
# creating a choropleth map displaying the proportion of low-income
ggplot(census_data) +
geom_sf(aes(fill = cut_number(Proportion_low_income, 5)),
color = "black",
size = 0.1) +
scale_fill_brewer(palette = "YlOrRd") +
labs(fill = "Prop Low Income")
# creating a choropleth map displaying the number of parks accessible to a census tract's centroids within 30 minutes
ggplot(census_data) +
geom_sf(aes(fill = cut_number(accessibility, 5)),
color = "black",
size = 0.1) +
scale_fill_brewer(palette = "YlOrRd") +
labs(fill = "Number of Neighbourhoods Accessible Within 30 Minutes")
#creating a regression model of population regressing on number of accessible parks
model_population <- lm(formula = Population_2021 ~ accessibility,
data = census_data)
stargazer(model_population,
header = FALSE,
title = "Population of Census Tracts regressed on Number of Parks Accessible")
summary(model_population)
ggplot(data = census_data,
aes(x = accessibility,
y = Population_2021))+
geom_point() +
geom_smooth(formula = y ~ x,
method = "lm") +
ylab("Population (2021)") +
xlab("Number of Parks Accessible within 30 Minutes (Through walking or public transit")
#creating a regression model of population density regressing on number of accessible parks
model_population_density <- lm(formula = Population_density ~ accessibility,
data = census_data)
stargazer(model_population_density,
header = FALSE,
title = "Population Density of Census Tracts regressed on Number of Parks Accessible")
summary(model_population_density)
ggplot(data = census_data,
aes(x = accessibility,
y = Population_density))+
geom_point() +
geom_smooth(formula = y ~ x,
method = "lm") +
ylab("Population Density") +
xlab("Number of Parks Accessible within 30 Minutes (Through walking or public transit")
#creating a regression model of population density regressing on number of accessible parks
model_visible_minority <- lm(formula = Proportion_visible_minority ~ accessibility,
data = census_data)
stargazer(model_visible_minority,
header = FALSE,
title = "Proportion of Visible Minority Population in Census Tracts regressed on Number of Parks Accessible")
summary(model_visible_minority)
ggplot(data = census_data,
aes(x = accessibility,
y = Proportion_visible_minority))+
geom_point() +
geom_smooth(formula = y ~ x,
method = "lm") +
ylab("Proportion of Visible Minority Population") +
xlab("Number of Parks Accessible within 30 Minutes (Through walking or public transit")
#creating a regression model of population density regressing on number of accessible parks
model_nonvisible_minority <- lm(formula = Proportion_nonvisible_minority ~ accessibility,
data = census_data)
stargazer(model_nonvisible_minority,
header = FALSE,
title = "Proportion of Non-Visible Minority Population in Census Tracts regressed on Number of Parks Accessible")
summary(model_nonvisible_minority)
ggplot(data = census_data,
aes(x = accessibility,
y = Proportion_nonvisible_minority))+
geom_point() +
geom_smooth(formula = y ~ x,
method = "lm") +
ylab("Proportion of Non-Visible Minority Population") +
xlab("Number of Parks Accessible within 30 Minutes (Through walking or public transit")
#creating a regression model of population density regressing on number of accessible parks
model_income <- lm(formula = Proportion_low_income ~ accessibility,
data = census_data)
stargazer(model_income,
header = FALSE,
title = "Proportion of Low Income Population in Census Tracts regressed on Number of Parks Accessible")
summary(model_income)
ggplot(data = census_data,
aes(x = accessibility,
y = Proportion_low_income))+
geom_point() +
geom_smooth(formula = y ~ x,
method = "lm") +
ylab("Proportion of Low Income Population") +
xlab("Number of Parks Accessible within 30 Minutes (Through walking or public transit")
install.packages("usethis")
usethis::use_git_ignore("network.dat")
here::here()
here::here("Project data")
knitr::opts_chunk$set(echo = FALSE)
# assigning a persistent local cache
options(cancensus.cache_path = here::here("Project data"))
Sys.setenv(CM_CACHE_PATH = here::here("Project data"))
