#extracting point data from homeless shelter csv file
homeless_shelt_coord <- data.frame(do.call("rbind", strsplit(as.character(homeless_shelters$geo_point_2d), ",", fixed = TRUE)))
# Rename multiple columns
homeless_shelt_coord <- homeless_shelt_coord %>%
rename("X" = "X1",
"Y" = "X2")
#extracting point data from park csv file
parks_coord <- data.frame(do.call("rbind", strsplit(as.character(parks$GoogleMapDest), ",", fixed = TRUE)))
# Rename multiple columns
parks_coord <- parks_coord %>%
rename("X" = "X1",
"Y" = "X2")
#preparing park data for r5r
class(parks_coord)
parks_coord<- cbind(parks_coord, parks$ParkID)
# renaming columns
parks_coord <- parks_coord %>%
rename("lat" = "X",
"lon" = "Y",
"id" = "parks$ParkID")
# changing columns to numeric
parks_coord$lon <- as.numeric(parks_coord$lon)
parks_coord$lat <- as.numeric(parks_coord$lat)
parks_coord <- parks_coord %>%
add_column(Parks_count = 1)
#extracting point data from trees csv files
trees_coord <- data.frame(do.call("rbind", strsplit(as.character(street_trees$geo_point_2d), ",", fixed = TRUE)))
# Rename multiple columns
trees_coord <- trees_coord %>%
rename("X" = "X1",
"Y" = "X2")
#allocating RAM memory to Java to use the r5r package
options(java.parameters = "-Xmx2G")
#building transport network for r5r
path <- file.path("Project data/r5rpath")
#building transport network for r5r
list.files(path)
r5r_core <- setup_r5(data_path = path)
#load origin points
points <- centroids_df
class(points)
#points of interest: parks
poi <- parks_coord
#departure times
departure_datetime <- as.POSIXct("16-02-2023 14:00:00",
format = "%d-%m-%Y %H:%M:%S")
access <- accessibility(r5r_core = r5r_core,
origins = points,
destinations = poi,
opportunities_colnames = c("Parks_count",),
mode = c("WALK", "TRANSIT"),
departure_datetime = departure_datetime,
decay_function = "step",
cutoffs = 10)
View(centroids_df)
access <- accessibility(r5r_core = r5r_core,
origins = points,
destinations = poi,
opportunities_colnames = c("Parks_count"),
mode = c("WALK", "TRANSIT"),
departure_datetime = departure_datetime,
decay_function = "step",
cutoffs = 10)
View(access)
access <- accessibility(r5r_core = r5r_core,
origins = points,
destinations = poi,
opportunities_colnames = c("Parks_count"),
mode = c("WALK", "TRANSIT"),
departure_datetime = departure_datetime,
decay_function = "step",
cutoffs = 30)
View(access)
# Cleaning data
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
# Cleaning data
rm(list = ls())
plot(pressure)
# loading packages
library(cancensus)
library(ggplot2)
library(tidyverse)
library(tidycensus)
library(tigris)
library(kableExtra)
library(plotly)
library(sf)
library(spatialreg)
library(spdep)
library(spgwr)
library(dplyr)
library(r5r)
library(rJava)
# storing the API key in system environment to be easily used in API calls
options(cancensus.api_key = "CensusMapper_ff4c917e80df34b71900e0a048c999dd")
# assigning a persistent local cache
options(cancensus.cache_path = "/Users/dainadeangelis/Desktop/4GA3Project-/Project data")
# returning census data and geography for the Vancouver CMA as an sf-class dataframe
census_data <- get_census(dataset='CA21', regions=list(CSD="5915022"), vectors=c("v_CA21_1","v_CA21_386","v_CA21_906","v_CA21_4238","v_CA21_4239", "v_CA21_4240", "v_CA21_4875", "v_CA21_4914"), labels="detailed", geo_format="sf", level='CT')
# replacing spaces for variable names with periods
colnames(census_data) =  gsub(colnames(census_data),pattern="\\s|[[:punct:]]",replacement = ".")
# obtaining centroids for census tracts in the Vancouver CMA
CT_centroids <- st_coordinates(st_centroid(census_data))
#converting centroids to data frame
centroids_df <- as.data.frame(CT_centroids)
class(centroids_df)
centroids_df<- cbind(centroids_df, census_data$GeoUID)
centroids_df <- centroids_df %>%
rename("lon" = "X",
"lat" = "Y",
"id" = "census_data$GeoUID")
# example
census_data <- census_data %>%
mutate(Proportion.visible.minority = (v.CA21.4875..Total.visible.minority.population / v.CA21.1..Population..2021))
# example
minority_prop_map <- ggplot(census_data) +
geom_sf(aes(fill = cut_number(Proportion.visible.minority, 5)),
color = "black",
size = 0.1) +
scale_fill_brewer(palette = "YlOrRd") +
labs(fill = "Prop Visible Minority Vancouver CTs")
minority_prop_map
# reading csv packages
parks <- read.csv(file = "Project data/parks.csv", head = TRUE, sep = ";")
street_trees <- read.csv(file = "Project data/street-trees.csv", head = TRUE, sep = ";")
homeless_shelters <- read.csv(file = "Project data/homeless-shelter-locations.csv", head = TRUE, sep = ";")
#extracting point data from homeless shelter csv file
homeless_shelt_coord <- data.frame(do.call("rbind", strsplit(as.character(homeless_shelters$geo_point_2d), ",", fixed = TRUE)))
# Rename multiple columns
homeless_shelt_coord <- homeless_shelt_coord %>%
rename("X" = "X1",
"Y" = "X2")
#extracting point data from park csv file
parks_coord <- data.frame(do.call("rbind", strsplit(as.character(parks$GoogleMapDest), ",", fixed = TRUE)))
# Rename multiple columns
parks_coord <- parks_coord %>%
rename("X" = "X1",
"Y" = "X2")
#preparing park data for r5r
class(parks_coord)
parks_coord<- cbind(parks_coord, parks$ParkID)
# renaming columns
parks_coord <- parks_coord %>%
rename("lat" = "X",
"lon" = "Y",
"id" = "parks$ParkID")
# changing columns to numeric
parks_coord$lon <- as.numeric(parks_coord$lon)
parks_coord$lat <- as.numeric(parks_coord$lat)
parks_coord <- parks_coord %>%
add_column(Parks_count = 1)
#extracting point data from trees csv files
trees_coord <- data.frame(do.call("rbind", strsplit(as.character(street_trees$geo_point_2d), ",", fixed = TRUE)))
# Rename multiple columns
trees_coord <- trees_coord %>%
rename("X" = "X1",
"Y" = "X2")
#allocating RAM memory to Java to use the r5r package
options(java.parameters = "-Xmx2G")
#building transport network for r5r
path <- file.path("Project data/r5rpath")
#building transport network for r5r
list.files(path)
r5r_core <- setup_r5(data_path = path)
#load origin points
points <- centroids_df
class(points)
#points of interest: parks
poi <- parks_coord
#departure times
departure_datetime <- as.POSIXct("16-02-2023 14:00:00",
format = "%d-%m-%Y %H:%M:%S")
access <- accessibility(r5r_core = r5r_core,
origins = points,
destinations = poi,
opportunities_colnames = c("Parks_count"),
mode = c("WALK", "TRANSIT"),
departure_datetime = departure_datetime,
decay_function = "step",
cutoffs = 30)
View(access)
knitr::opts_chunk$set(echo = TRUE)
# Cleaning data
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
# loading packages
library(cancensus)
library(ggplot2)
library(tidyverse)
library(tidycensus)
library(tigris)
library(kableExtra)
library(plotly)
library(sf)
library(spatialreg)
library(spdep)
library(spgwr)
library(dplyr)
library(r5r)
library(rJava)
# storing the API key in system environment to be easily used in API calls
options(cancensus.api_key = "CensusMapper_ff4c917e80df34b71900e0a048c999dd")
# assigning a persistent local cache
options(cancensus.cache_path = "/Users/dainadeangelis/Desktop/4GA3Project-/Project data")
# returning census data and geography for the Vancouver CMA as an sf-class dataframe
census_data <- get_census(dataset='CA21', regions=list(CSD="5915022"), vectors=c("v_CA21_1","v_CA21_386","v_CA21_906","v_CA21_4238","v_CA21_4239", "v_CA21_4240", "v_CA21_4875", "v_CA21_4914"), labels="detailed", geo_format="sf", level='CT')
View(census_data)
# replacing spaces for variable names with periods
colnames(census_data) =  gsub(colnames(census_data),pattern="\\s|[[:punct:]]",replacement = ".")
# obtaining centroids for census tracts in the Vancouver CMA
CT_centroids <- st_coordinates(st_centroid(census_data))
#converting centroids to data frame
centroids_df <- as.data.frame(CT_centroids)
class(centroids_df)
centroids_df<- cbind(centroids_df, census_data$GeoUID)
centroids_df <- centroids_df %>%
rename("lon" = "X",
"lat" = "Y",
"id" = "census_data$GeoUID")
# example
census_data <- census_data %>%
mutate(Proportion.visible.minority = (v.CA21.4875..Total.visible.minority.population / v.CA21.1..Population..2021))
# example
minority_prop_map <- ggplot(census_data) +
geom_sf(aes(fill = cut_number(Proportion.visible.minority, 5)),
color = "black",
size = 0.1) +
scale_fill_brewer(palette = "YlOrRd") +
labs(fill = "Prop Visible Minority Vancouver CTs")
minority_prop_map
View(census_data)
# returning census data and geography for the Vancouver CMA as an sf-class dataframe
census_data <- get_census(dataset='CA21', regions=list(CSD="5915022"), vectors=c("v_CA21_1","v_CA21_386","v_CA21_906","v_CA21_4238","v_CA21_4239", "v_CA21_4240", "v_CA21_4875", "v_CA21_4914", "v_CA21_1010"), labels="detailed", geo_format="sf", level='CT')
# replacing spaces for variable names with periods
colnames(census_data) =  gsub(colnames(census_data),pattern="\\s|[[:punct:]]",replacement = ".")
View(census_data)
# calculating the proportion of low income status in Vancouver census tracts
census_data <- census_data %>%
mutate(Proportion.low.income = (v.CA21.1010..LIM.low.income.status.in.2020.for.the.population.in.private.households / v.CA21.1..Population..2021))
# constructing a continuous area cartogram for census tracts of the Vancouver CSD, being weighted by population
CT_pop_cartogram <- cartogram_cont(census_data, weight = "Population")
# loading packages
library(cancensus)
library(ggplot2)
library(tidyverse)
library(tidycensus)
library(tigris)
library(kableExtra)
library(plotly)
library(sf)
library(spatialreg)
library(spdep)
library(spgwr)
library(dplyr)
library(r5r)
library(rJava)
library(cartogram)
# constructing a continuous area cartogram for census tracts of the Vancouver CSD, being weighted by population
CT_pop_cartogram <- cartogram_cont(census_data, weight = "Population")
ggplot(census_data) +
geom_sf(aes(fill = cut_number(Population, 5)), colour = NA, size = 0.1) +
scale_fill_brewer(palette = "YlOrRd") +
coord_sf() +
labs(fill = "Population")
ggplot(census_data) +
geom_sf(aes(fill = cut_number(Population, 5)), colour = "White", size = 0.1) +
scale_fill_brewer(palette = "YlOrRd") +
coord_sf() +
labs(fill = "Population")
View(census_data)
knitr::opts_chunk$set(echo = TRUE)
# Clearing data
rm(list = ls())
# loading packages
library(cancensus) #this package allows us to download census data from Stats Canada
library(ggplot2)
library(tidyverse) #collection of packages for data visualization and manipulation (includes dplyr and ggplot2)
library(tidycensus)
library(tigris)
library(kableExtra)
library(plotly)
library(sf)
library(spatialreg)
library(spdep)
library(spgwr)
library(dplyr)
library(r5r)
library(rJava)
library(cartogram)
library(kableExtra)
library(plotly) #packaged used to create interactive graphics
library(sf) #package to work with geospatial data of simple feature class
library(spatialreg) #package used to perform spatial regression analysis
library(spdep) #package used to compute spatial dependence, weighting schemes, and spatial statistics
library(spgwr) # package for geographically weighted regression
library(dplyr) #package to work with and manipulate data frames
library(r5r) #package to generate routing analysis and calculate the accessibility of parks in Vancouver
library(rJava) #an r to java interface used to support the r5r package
# storing the API key in system environment to be easily used in API calls
options(cancensus.api_key = "CensusMapper_ff4c917e80df34b71900e0a048c999dd")
# assigning a persistent local cache
options(cancensus.cache_path = "/Users/dainadeangelis/Desktop/4GA3Project-/Project data")
# returning census data and geography for the Vancouver CMA as an sf-class dataframe
census_data <- get_census(dataset='CA21', regions=list(CSD="5915022"), vectors=c("v_CA21_1","v_CA21_386","v_CA21_906","v_CA21_4238","v_CA21_4239", "v_CA21_4240", "v_CA21_4875", "v_CA21_4914", "v_CA21_1010"), labels="detailed", geo_format="sf", level='CT')
# replacing spaces for variable names with periods
colnames(census_data) =  gsub(colnames(census_data),pattern="\\s|[[:punct:]]",replacement = ".")
View(census_data)
View(census_data)
# returning census data and geography for the Vancouver CMA as an sf-class dataframe
census_data <- get_census(dataset='CA21', regions=list(CSD="5915022"), vectors=c("v_CA21_1","v_CA21_386","v_CA21_906", "v_CA21_4875", "v_CA21_4914", "v_CA21_1010"), labels="detailed", geo_format="sf", level='CT')
View(census_data)
View(census_data)
knitr::opts_chunk$set(echo = TRUE)
# Clearing data
rm(list = ls())
# loading packages
library(cancensus) #this package allows us to download census data from Stats Canada
library(ggplot2)
library(tidyverse) #collection of packages for data visualization and manipulation (includes dplyr and ggplot2)
library(tidycensus)
library(tigris)
library(kableExtra)
library(plotly)
library(sf)
library(spatialreg)
library(spdep)
library(spgwr)
library(dplyr)
library(r5r)
library(rJava)
library(cartogram)
library(kableExtra)
library(plotly) #packaged used to create interactive graphics
library(sf) #package to work with geospatial data of simple feature class
library(spatialreg) #package used to perform spatial regression analysis
library(spdep) #package used to compute spatial dependence, weighting schemes, and spatial statistics
library(spgwr) # package for geographically weighted regression
library(dplyr) #package to work with and manipulate data frames
library(r5r) #package to generate routing analysis and calculate the accessibility of parks in Vancouver
library(rJava) #an r to java interface used to support the r5r package
# storing the API key in system environment to be easily used in API calls
options(cancensus.api_key = "CensusMapper_ff4c917e80df34b71900e0a048c999dd")
# assigning a persistent local cache
options(cancensus.cache_path = "/Users/dainadeangelis/Desktop/4GA3Project-/Project data")
# returning census data and geography for the Vancouver CMA as an sf-class dataframe
census_data <- get_census(dataset='CA21', regions=list(CSD="5915022"), vectors=c("v_CA21_1","v_CA21_386","v_CA21_906", "v_CA21_4875", "v_CA21_4914", "v_CA21_1010"), labels="detailed", geo_format="sf", level='CT')
View(census_data)
# replacing spaces for variable names with periods
colnames(census_data) =  gsub(colnames(census_data),pattern="\\s|[[:punct:]]",replacement = ".")
View(census_data)
# removing columns that are not needed for analysis
census_data <- census_data[,-c(4,5,10,13,16)]
census_data
View(census_data)
# returning census data and geography for the Vancouver CMA as an sf-class dataframe
census_data <- get_census(dataset='CA21', regions=list(CSD="5915022"), vectors=c("v_CA21_1","v_CA21_386","v_CA21_906", "v_CA21_4875", "v_CA21_4914", "v_CA21_1010"), labels="detailed", geo_format="sf", level='CT')
# removing columns that are not needed for analysis
census_data <- census_data[,-c(4,5,9,10,13,15,16)]
View(census_data)
# renaming the columns in the dataset
names(census_data) [1,3,4,7,10:15] <- c("Shape_area(km^2)", "Number_of_households", "Region_name", "Number_of_dwellings", "Population_2021", "Average_age", "Median_total_income_of_household_2020", "Total_visible_minority_population", "Not_a_visible_minority", "Low_income_status_for_the_population_in_private_households_2020")
# renaming the columns in the dataset
names(census_data) [1,3,4,7,10:15] <- c("Shape_area_km2", "Number_of_households", "Region_name", "Number_of_dwellings", "Population_2021", "Average_age", "Median_total_income_of_household_2020", "Total_visible_minority_population", "Not_a_visible_minority", "Low_income_status_for_the_population_in_private_households_2020")
# renaming the columns in the dataset
names(census_data) [1,3,4,7,10,11,12,13,14,15] <- c("Shape_area_km2", "Number_of_households", "Region_name", "Number_of_dwellings", "Population_2021", "Average_age", "Median_total_income_of_household_2020", "Total_visible_minority_population", "Not_a_visible_minority", "Low_income_status_for_the_population_in_private_households_2020")
# renaming the columns in the dataset
names(census_data) [1,3,4,7,10,11,12,13,14,15] <- c("Shape_area_km2", "Number_of_households", "Region_name", "Number_of_dwellings", "Population_2021", "Average_age", "Median_total_income_of_household_2020", "Total_visible_minority_population", "Not_a_visible_minority", "Low_income_status_for_the_population_in_private_households_2020")
# renaming the columns in the dataset
names(census_data)[1,3,4,7,10,11,12,13,14,15] <- c("Shape_area_km2", "Number_of_households", "Region_name", "Number_of_dwellings", "Population_2021", "Average_age", "Median_total_income_of_household_2020", "Total_visible_minority_population", "Not_a_visible_minority", "Low_income_status_for_the_population_in_private_households_2020")
# renaming the columns in the dataset
names(census_data) [1,3,4,7,10:15] <- "Shape_area_km2", "Number_of_households", "Region_name", "Number_of_dwellings", "Population_2021", "Average_age", "Median_total_income_of_household_2020", "Total_visible_minority_population", "Not_a_visible_minority", "Low_income_status_for_the_population_in_private_households_2020"
# renaming the columns in the dataset
names(census_data) [1,3,4,7,10:15] <- ("Shape_area_km2", "Number_of_households", "Region_name", "Number_of_dwellings", "Population_2021", "Average_age", "Median_total_income_of_household_2020", "Total_visible_minority_population", "Not_a_visible_minority", "Low_income_status_for_the_population_in_private_households_2020")
# renaming the columns in the dataset
names(census_data) [1,3,4,7,10:15] <- c("Shape_area_km2", "Number_of_households", "Region_name", "Number_of_dwellings", "Population_2021", "Average_age", "Median_total_income_of_household_2020", "Total_visible_minority_population", "Not_a_visible_minority", "Low_income_status_for_the_population_in_private_households_2020")
# renaming the columns in the dataset
names(census_data) [1, 3, 4, 7, 10:15] <- c("Shape_area_km2", "Number_of_households", "Region_name", "Number_of_dwellings", "Population_2021", "Average_age", "Median_total_income_of_household_2020", "Total_visible_minority_population", "Not_a_visible_minority", "Low_income_status_for_the_population_in_private_households_2020")
# renaming the columns in the dataset
set_names(census_data) [1, 3, 4, 7, 10:15] <- c("Shape_area_km2", "Number_of_households", "Region_name", "Number_of_dwellings", "Population_2021", "Average_age", "Median_total_income_of_household_2020", "Total_visible_minority_population", "Not_a_visible_minority", "Low_income_status_for_the_population_in_private_households_2020")
# renaming the columns in the dataset
set_names (census_data) [1, 3, 4, 7, 10:15] <- c("Shape_area_km2", "Number_of_households", "Region_name", "Number_of_dwellings", "Population_2021", "Average_age", "Median_total_income_of_household_2020", "Total_visible_minority_population", "Not_a_visible_minority", "Low_income_status_for_the_population_in_private_households_2020")
# renaming the columns in the dataset
names(census_data) [1, 3, 4, 7, 10:15] <- c("Shape_area_km2", "Number_of_households", "Region_name", "Number_of_dwellings", "Population_2021", "Average_age", "Median_total_income_of_household_2020", "Total_visible_minority_population", "Not_a_visible_minority", "Low_income_status_for_the_population_in_private_households_2020")
# renaming the columns in the dataset
rename(census_data) [1, 3, 4, 7, 10:15] <- c("Shape_area_km2", "Number_of_households", "Region_name", "Number_of_dwellings", "Population_2021", "Average_age", "Median_total_income_of_household_2020", "Total_visible_minority_population", "Not_a_visible_minority", "Low_income_status_for_the_population_in_private_households_2020")
# renaming the columns in the dataset
name(census_data) [1] <- "Shape_area_km2"
# renaming the columns in the dataset
names(census_data) [1] <- "Shape_area_km2"
#, 3, 4, 7, 10:15] <- c("Shape_area_km2", "Number_of_households", "Region_name", "Number_of_dwellings", "Population_2021", "Average_age", "Median_total_income_of_household_2020", "Total_visible_minority_population", "Not_a_visible_minority", "Low_income_status_for_the_population_in_private_households_2020")
# renaming the columns in the dataset
names(census_data) [1] <- "Shape_area_km2"
names(census_data) [3] <- "Number_of_households"
names(census_data) [4] <- "Region_name"
names(census_data) [7] <- "Number_of_dwellings"
names(census_data) [10:15] <- c("Population_2021", "Average_age", "Median_total_income_of_household_2020", "Total_visible_minority_population", "Not_a_visible_minority", "Low_income_status_for_the_population_in_private_households_2020")
knitr::opts_chunk$set(echo = TRUE)
# Clearing data
rm(list = ls())
# loading packages
library(cancensus) #this package allows us to download census data from Stats Canada
library(ggplot2)
library(tidyverse) #collection of packages for data visualization and manipulation (includes dplyr and ggplot2)
library(tidycensus)
library(tigris)
library(kableExtra)
library(plotly)
library(sf)
library(spatialreg)
library(spdep)
library(spgwr)
library(dplyr)
library(r5r)
library(rJava)
library(cartogram)
library(kableExtra)
library(plotly) #packaged used to create interactive graphics
library(sf) #package to work with geospatial data of simple feature class
library(spatialreg) #package used to perform spatial regression analysis
library(spdep) #package used to compute spatial dependence, weighting schemes, and spatial statistics
library(spgwr) # package for geographically weighted regression
library(dplyr) #package to work with and manipulate data frames
library(r5r) #package to generate routing analysis and calculate the accessibility of parks in Vancouver
library(rJava) #an r to java interface used to support the r5r package
# storing the API key in system environment to be easily used in API calls
options(cancensus.api_key = "CensusMapper_ff4c917e80df34b71900e0a048c999dd")
# assigning a persistent local cache
options(cancensus.cache_path = "/Users/dainadeangelis/Desktop/4GA3Project-/Project data")
# returning census data and geography for the Vancouver CMA as an sf-class dataframe
census_data <- get_census(dataset='CA21', regions=list(CSD="5915022"), vectors=c("v_CA21_1","v_CA21_386","v_CA21_906", "v_CA21_4875", "v_CA21_4914", "v_CA21_1010"), labels="detailed", geo_format="sf", level='CT')
# removing columns that are not needed for analysis
census_data <- census_data[,-c(4,5,9,10,13,15,16)]
# renaming the columns in the dataset
names(census_data) [1] <- "Shape_area_km2"
names(census_data) [3] <- "Number_of_households"
names(census_data) [4] <- "Region_name"
names(census_data) [7] <- "Number_of_dwellings"
names(census_data) [10:15] <- c("Population_2021", "Average_age", "Median_total_income_of_household_2020", "Total_visible_minority_population", "Not_a_visible_minority", "Low_income_status_for_the_population_in_private_households_2020")
# calculating population density for the census tracts in Vancouver
census_data <- census_data %>%
mutate(Population_density =
(Population_2021 / Shape_area_km2))
# calculating the proportion of the minority population and adding to census_data
census_data <- census_data %>%
mutate(Proportion_visible_minority= (Total_visible_minority_population / Population_2021))
# calculating the proportion of low income status in Vancouver census tracts
census_data <- census_data %>%
mutate(Proportion_low_income = (Low_income_status_for_the_population_in_private_households_2020 / Population_2021))
View(census_data)
ggplot(census_data) +
geom_sf(aes(fill = cut_number(Population, 5)), colour = "White", size = 0.1) +
scale_fill_brewer(palette = "YlOrRd") +
coord_sf() +
labs(fill = "Population")
ggplot(census_data) +
geom_sf(aes(fill = cut_number(Population_2021, 5)), colour = "White", size = 0.1) +
scale_fill_brewer(palette = "YlOrRd") +
coord_sf() +
labs(fill = "Population")
# creating a choropleth map for the population density
ggplot(census_data) +
geom_sf(aes(fill = cut_number(Population_density, 5)), colour = "White", size = 0.1) +
scale_fill_brewer(palette = "YlOrRd") +
coord_sf() +
labs(fill = "Population Density")
# creating a choropleth map for the population density
ggplot(census_data) +
geom_sf(aes(fill = cut_number(Population_density, 5)), colour = "black", size = 0.1) +
scale_fill_brewer(palette = "YlOrRd") +
coord_sf() +
labs(fill = "Population Density")
# creating a choropleth map for the 2021 population
ggplot(census_data) +
geom_sf(aes(fill = cut_number(Population_2021, 5)), colour = "black", size = 0.1) +
scale_fill_brewer(palette = "YlOrRd") +
coord_sf() +
labs(fill = "Population")
# creating a choropleth map for the population density
ggplot(census_data) +
geom_sf(aes(fill = cut_number(Population_density, 7)), colour = "black", size = 0.1) +
scale_fill_brewer(palette = "YlOrRd") +
coord_sf() +
labs(fill = "Population Density")
# creating a choropleth map for the population density
ggplot(census_data) +
geom_sf(aes(fill = cut_number(Population_density, 6)), colour = "black", size = 0.1) +
scale_fill_brewer(palette = "YlOrRd") +
coord_sf() +
labs(fill = "Population Density")
# creating a choropleth map for the population density
ggplot(census_data) +
geom_sf(aes(fill = cut_number(Population_density, 5)), colour = "black", size = 0.1) +
scale_fill_brewer(palette = "YlOrRd") +
coord_sf() +
labs(fill = "Population Density")
# creating a choropleth map for the proportion of the visisble minority population
minority_prop_map <- ggplot(census_data) +
geom_sf(aes(fill = cut_number(Proportion_visible_minority, 5)),
color = "black",
size = 0.1) +
scale_fill_brewer(palette = "YlOrRd") +
labs(fill = "Prop Visible Minority Vancouver CTs")
minority_prop_map
# creating a choropleth map for the proportion of the visisble minority population
ggplot(census_data) +
geom_sf(aes(fill = cut_number(Proportion_visible_minority, 5)),
color = "black",
size = 0.1) +
scale_fill_brewer(palette = "YlOrRd") +
labs(fill = "Prop Visible Minority")
